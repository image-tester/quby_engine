=marukufix(question.title, "answer_#{question.key}")
- show_values = question.show_values == true or question.show_values == :all or question.show_values == session[:display_mode].to_sym
.description-and-fields
  .description
    - unless question.description.blank?
      :markdown
        #{raw question.description}
  .fields(id="answer_#{question.key}_input")
    - question.options.each do |opt|
      - checked = @answer.send(question.key) == opt.key.to_s
      - @answer.to_hide += opt.hides_questions if checked 
      - if opt.inner_title
        .inner-title
          :markdown
            #{raw opt.description}
      - else
        .option(class="#{show_values ? 'show_values' : nil}")
          .radiocheckwrapper
            - radio_classes = []
            - radio_classes << "subinput" if subquestion
            - radio_classes << "deselectable" if question.deselectable
            = radio_button(:answer, question.key, opt.key,
              {:hides => opt.hides_questions.to_json || "[]", :allhidden => question.hides_questions.to_json ||"[]", :class => radio_classes, :disabled => disabled ? "" : nil})
          - if show_values
            .value= opt.value
          .labelwrapper
            %label(for="answer_#{question.key}_#{opt.key}")
              %span
                :markdown
                  #{raw opt.description}
          - unless opt.questions.empty?
            .subquestions= render :partial => "answers/paged/item", :collection => opt.questions,  :locals => {:subquestion => true, :disabled => !checked}
    = radio_button_tag(question.key, "DESELECTED_RADIO_VALUE", false, :class => "hidden", :name => "answer[#{question.key}]")