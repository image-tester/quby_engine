/ Begin _item.html.haml
.item{:class => ((not @answer.errors[item.key].empty?) ? "errors" : "")}
  - case item.class.name
  - when "Items::Text"
    :markdown
      #{item}
  - when "Items::Question"
    - item.validations.each do |validation|
      - exp_classes = ["error", validation[:type]]
      - valtypes = @answer.errors[item.key].collect{|e| e[:valtype]}
      - if not valtypes.include?(validation[:type])
        - exp_classes << "hidden" 
      - case validation[:type]
      - when :maximum
        %div{:class => exp_classes}= validation[:explanation] || "Waarde moet kleiner zijn dan #{validation[:value]}" 
      - when :minimum
        %div{:class => exp_classes}= validation[:explanation] || "Waarde moet groter zijn dan #{validation[:value]}"
      - when :requires_answer
        %div{:class => exp_classes}= validation[:explanation] || "Veld mag niet leeg zijn"
      - when :regexp
        %div{:class => exp_classes}= validation[:explanation] || "Moet voldoen aan de vorm #{validation[:matcher]}"
      - when :valid_integer
        %div{:class => exp_classes}= validation[:explanation] || "Moet een afgerond getal zijn"   
      - when :valid_float
        %div{:class => exp_classes}= validation[:explanation] || "Moet een getal zijn, gebruik een punt . als scheidingsteken"   
      - when :too_many_checked
        %div{:class => exp_classes}= validation[:explanation] || "Ongeldige combinatie van opties"
      - when :not_all_checked
        %div{:class => exp_classes}= validation[:explanation] || "Ongeldige combinatie van opties"
      - when :one_of
        %div{:class => exp_classes}= validation[:explanation] || "Moet een van de volgende waarden zijn: #{validation[:array].inspect}"
      - else
        %strong
          Error: unknown validation type
          = validation[:type]     
             
    
    - case item.type
    - when :open
      = render :partial => "item_question_open",   :locals => {:question => item}
    - when :string
      = render :partial => "item_question_string", :locals => {:question => item}
    - when :text
      = render :partial => "item_question_text",   :locals => {:question => item}
    - when :integer, :float
      = render :partial => "item_question_number",   :locals => {:question => item}
    - when :radio
      = render :partial => "item_question_radio",  :locals => {:question => item}
    - when :date
      = render :partial => "item_question_date",   :locals => {:question => item}
    - when :check_box
      = render :partial => "item_question_check_box",   :locals => {:question => item}
    - else
      %strong
        Error: unknown question type
        = item.type
        for question
        = item.key
  - else
    Error: unknown item type
    = item.class.name
    for question
    = item.key
/ End _item.html.haml